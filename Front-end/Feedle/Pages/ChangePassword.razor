@page "/ChangePassword"
@using Feedle.Data
@using Feedle.Models
@inject IUserService UserService
@inject BlazorTimer Timer
@inject NavigationManager NavigationManager;

@if (!changePasswordStatus)
{
    <AuthorizeView>
        <Authorized>
            <div class="form-signin">
                <img class="mb-4" src="extra/9742 feedle_RB_1.png" alt width="72">
                <h1 class="h3 mb-3 font-weight-normal">Password change</h1>
                <label for="inputPassword0" class="sr-only">Password</label>
                <input @bind-value="password0" type="password" id="inputPassword0" class="form-control" placeholder="Password" required="">
                <label for="inputPassword1" class="sr-only">Repeat Password</label>
                <input @bind-value="password1" type="password" id="inputPassword1" class="form-control" placeholder="Repeat password" required="">
                <div>@errorMessage</div>
                <button @onclick="ChangePass" class="btn btn-lg btn-primary btn-block" type="submit">Change password</button>
            </div>
        </Authorized>
        <NotAuthorized>
            <Error></Error>
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <div class="text-center">
        <p class="text-muted">
            You have successfuly changed the password.
        </p>
        <p class="text-muted">Redirecting to front page in a moment ...</p>
    </div>
}


@code {
    User currentUser { get; set; }
    private string password0;
    private string password1;
    private string errorMessage;
    bool changePasswordStatus;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUser();
    }

    async Task ChangePass()
    {
        if (check(password0) == false && check(password1) == false)
        {
            try
            {
                if (password0.Equals(password1))
                {
                    var user = await UserService.GetCurrentUser();
                    user.Password = password0;
                    await UserService.UpdateCurrentUser(user);
                    StartTimer(2000);
                    NavigationManager.NavigateTo("/LogOut");
                }
                else
                {
                    password0 = "";
                    password1 = "";
                    errorMessage = "Passwords do not match";
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
        else
        {
            errorMessage = "Fill in all the fields";
        }
    }

    public static bool check(string s)
    {
        return (s == null || s == String.Empty) ? true : false;
    }

    //timer
    private void StartTimer(int msec)
    {
        changePasswordStatus = true;
        InvokeAsync(StateHasChanged);
        Timer.SetTimer(msec);
        Timer.OnElapsed += TimerElapsedHandler;
    }

    private void TimerElapsedHandler()
    {
        NavigationManager.NavigateTo("/");
    }

}