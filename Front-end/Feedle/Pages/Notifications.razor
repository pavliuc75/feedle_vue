@page "/Notifications"
@using Radzen
@using Feedle.Data
@using Feedle.Models
@inject IUserService UserService;
<div class="row">
    <RadzenIcon Icon="notifications"></RadzenIcon>
<h3>Notifications</h3>
</div>
@foreach (FriendRequestNotification n in GetRightNotifications())
{
    <RadzenCard>
        <div class="row">
            <div>@CurrentUser.UserName have sent you a @n.PotentialFriendUserName request</div>
            <div class="ml-auto">
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Icon="person" Click=@(args => OnAccept(n))>Accept</RadzenButton>

                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="person_add" Click=@(args => OnDecline(n))>Decline</RadzenButton>
            </div>
        </div>
    </RadzenCard>
}


@code {
    private User CurrentUser;

    protected async override Task OnInitializedAsync()
    {
        CurrentUser = await UserService.GetCurrentUser();
        await ReceiveNotification();
    }

    public async Task ReceiveNotification()
    {
       /* try
        {
            notifications = await UserService.GetNotificationsUpdate(UserService.GetLastNotificationId(),CurrentUser.Id);
        }
        catch (Exception e)
        {
            ReceiveNotification();
            throw;
        }
        ReceiveNotification();
        */
    }

    private async Task OnAccept(FriendRequestNotification friendRequestNotification)
    {
        bool result = await UserService.RespondToFriendNotification(true, friendRequestNotification);
        if (result)
        {
            CurrentUser = await UserService.GetCurrentUser();
        }
    }

    private async Task OnDecline(FriendRequestNotification friendRequestNotification)
    {
        bool result = await UserService.RespondToFriendNotification(false, friendRequestNotification);
        if (result)
        {
            CurrentUser = await UserService.GetCurrentUser();
        }
    }

    private List<FriendRequestNotification> GetRightNotifications()
    {
        if (CurrentUser == null)
        {
            return new List<FriendRequestNotification>();
        }
        List<FriendRequestNotification> result = new List<FriendRequestNotification>();
        foreach (var fn in CurrentUser.FriendRequestNotifications)
        {
            if (fn.CreatorId != CurrentUser.Id)
            {
                result.Add(fn);
            }
        }
        return result;
    }

}